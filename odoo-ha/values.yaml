## NDP Syst√®mes Odoo image version
## ref: https://hub.docker.com/r/bitnami/odoo/tags/
##
image:
  registry: docker.io
  repository: ndpsystemes/odoo
  tag: "10.0"
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always

odoo:
  installModule:
  updateModule:
  ## Nb of odoo workers inside one pod
  workers: 3
  ## Set to have none default value
  limitTimeCPU: 1800
  limitTimeReal: 3600
  limitMemorySoft:
  limitMemoryHard:
  ## Override here to define a custom database
  database:
  ## Set to "False" string to hav demo data loaded
  withoutDemo: "all"
  ## Additional command line params to send to odoo (string)
  cmdLineParams:
  ## Set to "True" string for testing Odoo
  testEnable:
  ## Set to "True" string for stopping after DB initialization
  ## (Useful mainly for tests)
  stopAfterInit:
  ## Regex for allowed databases
  dbFilter: ".*"
  ## Set to False if you do not want unaccentuated searches
  unaccent: "True"
  ## Leave empty for autogenerated password
  adminPassword:
  ## Set log level
  logLevel: "info"
  ## server wide modules to load
  load:
  ## Queue jobs management
  queueJobs:
    enabled: false
    channels: "root:1"

git:
  ## Default server for repositories
  server: gitlab.ndp-systemes.fr
  ## Default branch for repositories
  branch:

  pullKeySecret:
    name: "ssh-private-key-deploy"
    key: "deploy_key_NDP"

  repositories:
    ## Add git repositories
    ## path: git path on the server
    ## method: ssh or https. Defaults to ssh
    ## branch: branch name. Defaults to git.branch or image.tag
    ## server: git server name. Defaults to git.server. If set, https is assumed.
    ## httpsSecret: name of a secret with https credentials. Secret must contain a 'username' and a 'password'

    # DEPOT_GIT:
    #   path: my-user/my-project
    #   branch: 12.0
    #   method: ssh
    #   server: github.com
    #   httpsSecret: my-https-secret
    DEPOT_GIT:
      path:
    DEPOT_GIT2:
      path: odoo-addons/common-modules
    DEPOT_GIT3:
      path: odoo-addons/community-addons

postgresql:
  instances: 2
  parameters:
    shared_buffers: "128MB"
    work_mem: "4MB"
    max_connections: "100"
    maintenance_work_mem: "64MB"
    vacuum_cost_delay: "20ms"
    synchronous_commit: "local"
    wal_buffers: "8MB"
    max_wal_size: "1GB"
    checkpoint_completion_target: "0.9"
    effective_cache_size: "4GB"
    tcp_keepalives_idle: "300"
    deadlock_timeout: "3s"
  volume:
    size: 8Gi

## Kubernetes svc configuration
## For minikube, set this to NodePort, elsewhere use LoadBalancer
##
## Use serviceLoadBalancerIP to request a specific static IP,
## otherwise leave blank
##
service:
  ## Kubernetes svc type
  ## For minikube, set this to NodePort, elsewhere use LoadBalancer
  ##
  type: ClusterIP

  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster

## Configure the ingress resource that allows you to access the
## Odoo installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Leave empty to have default name
  name:
  ## Default domain for ingress
  domain: tests.ndp-systemes.fr
  ## Set to true to enable ingress record generation
  enabled: true

  ## Ingress annotations done as key:value pairs
  ## If you're using kube-lego, you will want to add:
  ## kubernetes.io/tls-acme: true
  ##
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
  ##
  ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
  annotations:
    ingress.kubernetes.io/hsts-max-age: "315360000"
    ingress.kubernetes.io/ssl-redirect: "true"

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## odoo data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  #  storageClass: "-"
  accessMode: ReadWriteOnce
  size: 8Gi

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim:

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 512Mi
    cpu: 300m

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  enabled: true
  initialDelaySeconds: 1800
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

# Define custom environment variables to pass to the image here
extraEnv: {}

# Set to false if you do not care that Odoo and Postgresql are on the same node.
sameNode: true
