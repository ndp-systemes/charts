## NDP Syst√®mes Odoo image version
## ref: https://hub.docker.com/r/bitnami/odoo/tags/
##
image:
  registry: docker.io
  repository: ndpsystemes/odoo
  tag: "10.0"
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always

odoo:
  ## By default Odoo configuration will not be touched during upgrade
  ## Set reloadConfig to "true" to have all following options reset
  reloadConfig: false

  ##
  ## Following lines have no effect on upgrade if reloadConfig is false
  ##

  ## Nb of odoo workers inside one pod
  workers: 3
  ## Set to have none default value
  limitTimeCPU:
  limitTimeReal:
  limitMemorySoft:
  limitMemoryHard:
  ## Override to define a custom module to install
  module:
  ## Override here to define a custom database
  database:
  ## Set to "False" string to hav demo data loaded
  withoutDemo: "all"
  ## Additional command line params to send to odoo (string)
  cmdLineParams:
  ## Set to "True" string for testing Odoo
  testEnable:
  ## Set to "True" string for stopping after DB initialization
  ## (Useful mainly for tests)
  stopAfterInit:
  ## Regex for allowed databases
  dbFilter: ".*"
  ## Set to False if you do not want unaccentuated searches
  unaccent: "True"
  ## Leave empty for autogenerated password
  adminPassword:

git:
  ## Git server where to fetch sources
  server: gitlab.ndp-systemes.fr

  group: odoo-addons

  ## Set to override
  ## Defaults to tag
  branch:

  depProject1: common-modules
  depProject2: community-addons
  depProject3:

  ## Set to override project git repositories.
  repo1:
  repo2:
  repo3:
  repo4:

##
## PostgreSQL chart configuration
##
postgresql:

  postgresUser: "odoo"

  ## PostgreSQL password
  ## ref: https://hub.docker.com/_/postgres/
  ##
  # postgresPassword:

  existingSecret: 'secret'

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    ## postgresql data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "fast-disks"
    accessMode: ReadWriteOnce
    size: 20Gi

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim:

## Kubernetes svc configuration
## For minikube, set this to NodePort, elsewhere use LoadBalancer
##
## Use serviceLoadBalancerIP to request a specific static IP,
## otherwise leave blank
##
service:
  ## Kubernetes svc type
  ## For minikube, set this to NodePort, elsewhere use LoadBalancer
  ##
  type: ClusterIP

  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster

## Configure the ingress resource that allows you to access the
## Odoo installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Leave empty to have default name
  name:
  ## Default domain for ingress
  domain: test.ndp-systemes.fr
  ## Set to true to enable ingress record generation
  enabled: true

  ## Set this to true in order to enable TLS on the ingress record
  ## A side effect of this will be that the backend odoo service will be connected at port 443
  tls: false

  ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
  tlsSecret: odoo.local-tls

  ## Ingress annotations done as key:value pairs
  ## If you're using kube-lego, you will want to add:
  ## kubernetes.io/tls-acme: true
  ##
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
  ##
  ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
  annotations:
  #  kubernetes.io/ingress.class: nginx
  #  kubernetes.io/tls-acme: true

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using kube-lego, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: odoo.local-tls
  #   key:
  #   certificate:

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## odoo data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "fast-disks"
  accessMode: ReadWriteOnce
  size: 8Gi

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim:

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 512Mi
    cpu: 300m

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  enabled: true
  initialDelaySeconds: 1800
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 900
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
